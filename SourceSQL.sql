USE [BANKSYSTEM]
GO

/****** Object:  View [MYOB\Sharada.Keeli].[BK_V_BL_ACCOUNT_DETAILS_D]    Script Date: 11/12/2017 10:41:12 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [MYOB\Sharada.Keeli].[BK_V_BL_ACCOUNT_DETAILS_D] 
AS
SELECT * FROM BK_F_BL_ACCOUNT_DETAILS_D ('2017-11-01', '2017-11-30')

;

GO


------------------------------------------------------------------

USE [BANKSYSTEM]
GO

/****** Object:  UserDefinedFunction [MYOB\Sharada.Keeli].[BK_F_BL_ACCOUNT_DETAILS_D]    Script Date: 11/12/2017 10:40:26 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [MYOB\Sharada.Keeli].[BK_F_BL_ACCOUNT_DETAILS_D](@FROMDATE DATE,@TODATE DATE)

RETURNS TABLE AS
RETURN
(
WITH 
BANK_ACCNT_DATE_DETAILS AS 
(
	SELECT ml_ACCOUNTID, ML.ml_WHEN
		,CASE	WHEN ML.ml_MAINTENANCELOGTYPEID = 3	THEN ML.ml_WHEN
				ELSE NULL
		END AS BANK_ACCNT_DELETED_DATE
		,CASE	WHEN ML.ml_MAINTENANCELOGTYPEID = 4	THEN ML.ml_WHEN
				ELSE NULL
		END AS BANK_ACCNT_MOVEIN_DATE
		,CASE	WHEN ML.ml_MAINTENANCELOGTYPEID = 5	THEN ML.ml_WHEN
				ELSE NULL
		END AS BANK_ACCNT_MOVEOUT_DATE
	 FROM BK_T_MAINTENANCELOG ML
	 WHERE ML.ml_MAINTENANCELOGTYPEID IN (1,3,4,5,6) AND
		ML.ml_WHEN BETWEEN @FROMDATE AND @TODATE
)
,
BK_ACCNT_DATES AS 
(
	SELECT B.ml_ACCOUNTID
	,COALESCE(MIN(B.BANK_ACCNT_DELETED_DATE), NULL) BANK_ACCNT_DELETED_DATE
	,COALESCE(MIN(B.BANK_ACCNT_MOVEIN_DATE), NULL) BANK_ACCNT_MOVEIN_DATE
	,COALESCE(MIN(B.BANK_ACCNT_MOVEOUT_DATE), NULL) BANK_ACCNT_MOVEOUT_DATE
	FROM BANK_ACCNT_DATE_DETAILS B
	GROUP BY B.ml_ACCOUNTID
)
,
TX_DETAILS AS
(
	SELECT CLAC.clac_ACCOUNTID 
	,CLAC.clac_CLIENTID 
	,CLAC.clac_CLIENTACCOUNTID 
	,BL.bl_BILLINGID
	,bl_PERIODSTART
	,bl_PERIODEND
	,SUM(BLDT.bldt_QUANTITY) AS NUM_OF_TX
	,SUM(BLDT.bldt_TOTALCHARGE) AS AMT_BILLED
	,CASE WHEN BL.bl_PERIODSTART BETWEEN DATEADD(D, -30,  @FROMDATE) AND @TODATE
		THEN SUM(BLDT.bldt_QUANTITY) 
	 END AS NUM_TX_30DAYS
	,CASE WHEN BL.bl_PERIODSTART BETWEEN DATEADD(D, -60,  @FROMDATE) AND DATEADD(D, -30,  @TODATE)
		THEN SUM(BLDT.bldt_QUANTITY)
	 END AS NUM_TX_30_60DAYS
	,CASE WHEN BL.bl_PERIODSTART < DATEADD(D, -60,  @FROMDATE) 
		THEN SUM(BLDT.bldt_QUANTITY)
	 END AS NUM_TX_BEFORE_60DAYS
	,CASE WHEN BL.bl_PERIODSTART BETWEEN DATEADD(D, -30,  @FROMDATE) AND @TODATE
		THEN SUM(BLDT.bldt_TOTALCHARGE) 
	 END AS AMT_TX_30DAYS
	,CASE WHEN BL.bl_PERIODSTART BETWEEN DATEADD(D, -60,  @FROMDATE) AND DATEADD(D, -30,  @TODATE)
		THEN SUM(BLDT.bldt_TOTALCHARGE)
	 END AS AMT_TX_30_60DAYS
	,CASE WHEN BL.bl_PERIODSTART < DATEADD(D, -60,  @FROMDATE) 
		THEN SUM(BLDT.bldt_TOTALCHARGE)
	 END AS AMT_TX_BEFORE_60DAYS
	FROM BK_T_CLIENTACCOUNT CLAC 
	INNER JOIN BK_T_BILLINGCLIENTACCOUNT BLAC ON BLAC.blac_CLIENTACCOUNTID = CLAC.clac_CLIENTACCOUNTID
	INNER JOIN BK_T_BILLING BL ON BL.bl_BILLINGID = BLAC.blac_BILLINGID 
	INNER JOIN BK_T_BILLINGDETAIL BLDT ON BLDT.bldt_BILLINGCLIENTACCOUNTID = BLAC.blca_BILLINGCLIENTACCOUNTID
	LEFT JOIN  BK_T_BILLINGRULE BR ON BR.br_BILLINGRULEID = BLDT.bldt_BILLINGRULEID
	WHERE   BL.bl_PERIODSTART BETWEEN @FROMDATE AND @TODATE AND
			BR.br_CHARGETYPEID = 7 
		AND CLAC.clac_ACCOUNTID IS NOT NULL 
		AND CLAC.clac_PROVISIONALSTATUSID IN (1,3,7)
	GROUP BY CLAC.clac_ACCOUNTID 
		,CLAC.clac_CLIENTID 
		,CLAC.clac_CLIENTACCOUNTID  
		,BL.bl_BILLINGID
		,bl_PERIODSTART
		,bl_PERIODEND
)
,
ACTIVE_ACCOUNT AS
(
	SELECT clac_CLIENTACCOUNTID, clac_ACCOUNTID, clac_CLIENTID
	FROM dbo.BK_T_CLIENTACCOUNT
	WHERE clac_ACCOUNTID IS NOT NULL AND
	clac_ACTIVE = 1 AND
	clac_PROVISIONALSTATUSID = 1 
UNION
	--No of Active Offsite account per Practice
	SELECT clac_CLIENTACCOUNTID, clac_ACCOUNTID, cl_BILLTOCLIENTID AS clac_CLIENTID
	FROM
	DBO.BK_T_CLIENT
	JOIN DBO.BK_T_CLIENTACCOUNT
	ON clac_CLIENTID=cl_CLIENTID
	WHERE
	clac_ACCOUNTID IS NOT NULL AND
	clac_ACTIVE=1 AND
	clac_PROVISIONALSTATUSID IN (1,7) AND
	cl_BILLTOCLIENTID IS NOT NULL AND
	cl_CLIENTTYPEID=1 --and cl_BILLTOCLIENTID = 79924
UNION
	--No of Provisional Account per Practice
	SELECT clac_CLIENTACCOUNTID, clac_ACCOUNTID, clac_CLIENTID
	FROM dbo.BK_T_CLIENTACCOUNT
	WHERE clac_ACCOUNTID IS NOT NULL AND
	clac_ACTIVE = 1 AND
	clac_PROVISIONALSTATUSID IN (3,7) 
)
(
SELECT AA.clac_ACCOUNTID as BANK_ACCOUNT_ID
	, AA.clac_CLIENTID as PRACTICE_ID
	, AA.clac_CLIENTACCOUNTID as CLIENTACCOUNTID
	, CL.cl_CODE AS PRACTICE_CODE
	, CL.cl_NAME AS PRACTICE_NAME
	, CN.cn_CODE AS COUNTRY_CODE
	, AC.ac_ENTERED AS BANK_ACCNT_CREATED_DATE
	, AC.ac_LASTENTRYRECEIVED AS LAST_TX_DATE
	, AC.ac_SMSF AS SMSF_FLAG
	, BD.BANK_ACCNT_DELETED_DATE
	, BD.BANK_ACCNT_MOVEIN_DATE
	, BD.BANK_ACCNT_MOVEOUT_DATE
	, SUM(ISNULL(TX.NUM_OF_TX, 0)) NUM_OF_TX
	, SUM(ISNULL(TX.NUM_TX_30DAYS, 0)) NUM_TX_30DAYS
	, SUM(ISNULL(TX.NUM_TX_30_60DAYS, 0)) NUM_TX_30_60DAYS
	, SUM(ISNULL(TX.NUM_TX_BEFORE_60DAYS, 0)) NUM_TX_BEFORE_60DAYS
	, SUM(ISNULL(TX.AMT_BILLED, 0)) AMT_BILLED
	, SUM(ISNULL(TX.AMT_TX_30DAYS, 0)) AMT_TX_30DAYS
	, SUM(ISNULL(TX.AMT_TX_30_60DAYS, 0)) AMT_TX_30_60DAYS
	, SUM(ISNULL(TX.AMT_TX_BEFORE_60DAYS, 0)) AMT_TX_BEFORE_60DAYS
FROM ACTIVE_ACCOUNT AA  
	INNER JOIN BK_T_ACCOUNT AC ON AC.ac_ACCOUNTID = AA.clac_ACCOUNTID
	LEFT JOIN TX_DETAILS TX ON TX.clac_CLIENTACCOUNTID = AA.clac_CLIENTACCOUNTID 	
	LEFT JOIN BK_ACCNT_DATES BD ON BD.ml_ACCOUNTID = AA.clac_ACCOUNTID	
	LEFT JOIN (SELECT * FROM BK_T_CLIENT 
				WHERE cl_COUNTRYID IN (1,2) 
				--AND (cl_CLIENTTYPEID IN (1,3) OR (cl_CLIENTTYPEID = 7 AND cl_BILLTOCLIENTID IS NULL))
				AND cl_CLIENTID NOT IN (30142,48741,67184,30143,48742,67185)
			  ) CL ON CL.cl_CLIENTID = AA.clac_CLIENTID
	LEFT JOIN BK_T_COUNTRY CN ON CL.cl_COUNTRYID = CN.cn_COUNTRYID	
WHERE  ((CL.cl_CLIENTTYPEID = 7 AND CL.cl_BILLTOCLIENTID IS NULL) OR CL.cl_CLIENTTYPEID = 3)		  
GROUP BY AA.clac_ACCOUNTID 
	, AA.clac_CLIENTID 
	, AA.clac_CLIENTACCOUNTID 
	, CL.cl_CODE 
	, CL.cl_NAME 
	, CN.cn_CODE 
	, AC.ac_ENTERED 
	, AC.ac_LASTENTRYRECEIVED 
	, AC.ac_SMSF 
	, BD.BANK_ACCNT_DELETED_DATE
	, BD.BANK_ACCNT_MOVEIN_DATE
	, BD.BANK_ACCNT_MOVEOUT_DATE
)
)
;


GO


